Index: src/main/java/xyz/kiradev/Stellar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev;\r\n\r\nimport lombok.Getter;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.command.CommandExecutor;\r\nimport org.bukkit.plugin.Plugin;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\nimport xyz.kiradev.commands.admin.ArenaCMD;\r\nimport xyz.kiradev.commands.admin.KitsCMD;\r\nimport xyz.kiradev.commands.admin.MainCMD;\r\nimport xyz.kiradev.commands.admin.SetSpawnCMD;\r\nimport xyz.kiradev.commands.user.*;\r\nimport xyz.kiradev.listeners.*;\r\nimport xyz.kiradev.managers.*;\r\nimport xyz.kiradev.ui.unranked.UnrankedInventoryModern;\r\nimport xyz.kiradev.utils.Cooldowns;\r\nimport xyz.kiradev.utils.assemble.Assemble;\r\nimport xyz.kiradev.utils.render.Console;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Arrays;\r\n\r\n@Getter\r\npublic class Stellar extends JavaPlugin {\r\n\r\n    public static Stellar instance;\r\n\r\n    public static void loadManagers() {\r\n        ConfigManager.arenaManager = new ArenaManager();\r\n        ConfigManager.kitManager = new KitManager();\r\n        ConfigManager.divisionsManager = new DivisionsManager();\r\n    }\r\n\r\n    public static void redloadManagers() {\r\n        loadManagers();\r\n        ConfigManager.registerConfigs();\r\n    }\r\n\r\n    @Override\r\n    public void onEnable() {\r\n        instance = this;\r\n        Plugin luckPermsPlugin = getServer().getPluginManager().getPlugin(\"PlaceholderAPI\");\r\n        if (luckPermsPlugin != null && luckPermsPlugin.isEnabled()) {\r\n            new Placeholder(this).register();\r\n        }\r\n        loadManagers();\r\n        Console.sendMessage(\" \");\r\n\r\n        // PEARL COOLDOWN\r\n        Cooldowns.createCooldown(\"enderpearl\");\r\n\r\n        // CONFIG\r\n        ConfigManager.registerConfigs();\r\n\r\n        // SCOREBOARD\r\n        Assemble assemble = new Assemble(this, new ScoreboardManager());\r\n\r\n        // LIST LISTENERS\r\n        registerEventListeners();\r\n        Console.sendMessage(\" \");\r\n\r\n        // COMMANDS\r\n        registerCommands();\r\n        Console.sendMessage(\" \");\r\n\r\n// Define the plugin version\r\n        String pluginVersion = \"1.0.0\";\r\n\r\n// Generate the current date and time when the plugin loaded\r\n        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\r\n        String loadedTime = LocalDateTime.now().format(dateFormat);\r\n\r\n// Define the plugin build number and server version\r\n        int pluginBuild = 01 / 11 / 23;\r\n\r\n        String serverVersion = Bukkit.getVersion();\r\n// Extracting a simplified version string\r\n        String simplifiedServerVersion = serverVersion.split(\"MC: \")[1].split(\"\\\\)\")[0];\r\n\r\n        long startTime = System.currentTimeMillis();\r\n\r\n// Calculate the time taken for plugin loading\r\n        long endTime = System.currentTimeMillis();\r\n        long timeTaken = endTime - startTime;\r\n\r\n\r\n        // START MESSAGE\r\n        Console.sendMessage(\"&b $$$$$$\\\\    $$\\\\               $$\\\\ $$\\\\                     \");\r\n        Console.sendMessage(\"&b$$  __$$\\\\   $$ |              $$ |$$ |                    \");\r\n        Console.sendMessage(\"&b$$ /  \\\\__|$$$$$$\\\\    $$$$$$\\\\  $$ |$$ | $$$$$$\\\\   $$$$$$\\\\  \");\r\n        Console.sendMessage(\"&b\\\\$$$$$$\\\\  \\\\_$$  _|  $$  __$$\\\\ $$ |$$ | \\\\____$$\\\\ $$  __$$\\\\ \");\r\n        Console.sendMessage(\"&b \\\\____$$\\\\   $$ |    $$$$$$$$ |$$ |$$ | $$$$$$$ |$$ |  \\\\__|\");\r\n        Console.sendMessage(\"&b$$\\\\   $$ |  $$ |$$\\\\ $$   ____|$$ |$$ |$$  __$$ |$$ |      \");\r\n        Console.sendMessage(\"&b\\\\$$$$$$  |  \\\\$$$$  |\\\\$$$$$$$\\\\ $$ |$$ |\\\\$$$$$$$ |$$ |      \");\r\n        Console.sendMessage(\"&b \\\\______/    \\\\____/  \\\\_______|\\\\__|\\\\__| \\\\_______|\\\\__|      \");\r\n        Console.sendMessage(\"&3Stellar Loaded successfully\\n\");\r\n        Console.sendMessage(\"&b&lInformation\");\r\n        Console.sendMessage(\" | &3Version: &f\" + Constants.Ver);\r\n        Console.sendMessage(\" | &3Finished loading in: \" + timeTaken + \"ms\");\r\n        Console.sendMessage(\" | &3Build: \" + pluginBuild);\r\n        Console.sendMessage(\" | &3Server Version: \" + simplifiedServerVersion);\r\n        Console.sendMessage(\" | &3Plugin loaded on: \" + loadedTime + \"\\n\");\r\n        Console.sendMessage(\"&b&lLoaded\");\r\n        Console.sendMessage(\" | &3Successfully Loaded Managers!\");\r\n        Console.sendMessage(\" | &3Successfully Loaded Listeners!\");\r\n        Console.sendMessage(\" | &3Successfully Loaded Commands!\\n\");\r\n        Console.sendMessage(\"&b&lCredits\");\r\n        Console.sendMessage(\" | &3Author: &f\" + Constants.Author);\r\n        Console.sendMessage(\" | &3Thanks for using &9Stellar&3!\");\r\n        Console.sendMessage(\" | &3Discord: &b\" + Constants.Discord);\r\n    }\r\n\r\n    private void registerEventListeners() {\r\n        Arrays.asList(\r\n                new PlayerJoin(),\r\n                new SpawnListeners(),\r\n                new WorldListener(),\r\n                new GameListener(),\r\n                new UnrankedInventoryModern(ConfigManager.kitManager),\r\n                new BlockListener(),\r\n                new PlayerDataListener(),\r\n                new MenuListener(),\r\n                new StatsListener(),\r\n                new KitEditorListener()\r\n        ).forEach(listener -> getServer().getPluginManager().registerEvents(listener, this));\r\n    }\r\n\r\n    private void registerCommands() {\r\n        createCMD(\"setspawn\", new SetSpawnCMD());\r\n        createCMD(\"arena\", new ArenaCMD());\r\n        createCMD(\"Stellar\", new MainCMD());\r\n        createCMD(\"kit\", new KitsCMD());\r\n        createCMD(\"queue\", new QueueCMD());\r\n        createCMD(\"ping\", new PingCMD());\r\n        createCMD(\"leavequeue\", new LeaveQueueCMD());\r\n        createCMD(\"stats\", new StatsCMD());\r\n        createCMD(\"unranked\", new UnrankedCMD());\r\n        createCMD(\"ranked\", new RankedCMD());\r\n        createCMD(\"settings\", new SettingsCMD());\r\n        createCMD(\"kiteditor\", new KitEditorCMD());\r\n    }\r\n\r\n    private void createCMD(String cmd, CommandExecutor commandfile) {\r\n        getCommand(cmd).setExecutor(commandfile);\r\n    }\r\n\r\n    @Override\r\n    public void onDisable() {\r\n        getServer().getPluginManager().disablePlugin(this);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/Stellar.java b/src/main/java/xyz/kiradev/Stellar.java
--- a/src/main/java/xyz/kiradev/Stellar.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/Stellar.java	(date 1698852109304)
@@ -117,7 +117,6 @@
                 new SpawnListeners(),
                 new WorldListener(),
                 new GameListener(),
-                new UnrankedInventoryModern(ConfigManager.kitManager),
                 new BlockListener(),
                 new PlayerDataListener(),
                 new MenuListener(),
Index: src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.ui.unranked;\r\n\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.Material;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.inventory.Inventory;\r\nimport org.bukkit.inventory.ItemFlag;\r\nimport org.bukkit.inventory.ItemStack;\r\nimport org.bukkit.inventory.meta.ItemMeta;\r\nimport xyz.kiradev.managers.ConfigManager;\r\nimport xyz.kiradev.managers.KitManager;\r\nimport xyz.kiradev.types.Kit;\r\nimport xyz.kiradev.utils.render.CC;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class UnrankedInventoryModern implements Listener {\r\n    private static KitManager kitManager;\r\n\r\n    public UnrankedInventoryModern(KitManager kitManager) {\r\n        UnrankedInventoryModern.kitManager = kitManager;\r\n    }\r\n\r\n    public static void openMenu(Player player) {\r\n        // Create the inventory\r\n        Inventory menu = Bukkit.createInventory(null, 9 * ConfigManager.menusConfig.getInt(\"queue-gui-type.unranked.height\"),\r\n                CC.translate(ConfigManager.menusConfig.getString(\"queue-gui-type.unranked.menu-name\")));\r\n\r\n        int counter = 0;\r\n        int x = 1;\r\n        int y = 1;\r\n        String loreKey = \"queue-gui-type.item-meta\";\r\n        List<String> lore = ConfigManager.menusConfig.getStringList(loreKey);\r\n        List<String> translatedLore = new ArrayList<>();\r\n\r\n        for (Kit kit : kitManager.getKits()) {\r\n            ItemStack iconItem = kit.getIcon();\r\n            ItemMeta itemMeta = iconItem.getItemMeta();\r\n\r\n            // Add item flags\r\n            itemMeta.addItemFlags(ItemFlag.values());\r\n\r\n            // Set display name with color\r\n            itemMeta.setDisplayName(CC.translate(ConfigManager.menusConfig.getString(\"queue-gui-type.unranked.item-color\") + kit.getName()));\r\n\r\n            // Populate the translatedLore list with lore lines from your configuration\r\n            translatedLore.clear();\r\n            for (String loreLine : lore) {\r\n                translatedLore.add(CC.translate(loreLine));\r\n            }\r\n\r\n            String description = kit.getDescription();\r\n            List<String> loreWithDescription = new ArrayList<>();\r\n            boolean descriptionAdded = false;\r\n\r\n            for (String loreLine : translatedLore) {\r\n                if (loreLine.contains(\"{playing}\")) {\r\n                    loreWithDescription.add(loreLine.replace(\"{playing}\", Integer.toString(KitManager.getKit(kit.getName()).getPlaying())));\r\n                } else if (loreLine.contains(\"{queueing}\")) {\r\n                    loreWithDescription.add(loreLine.replace(\"{queueing}\", Integer.toString(KitManager.getKit(kit.getName()).getQueue())));\r\n                } else if (loreLine.contains(\"{description}\")) {\r\n                    if (description != null && !description.isEmpty()) {\r\n                        loreWithDescription.add(loreLine.replace(\"{description}\", CC.translate(description)));\r\n                        descriptionAdded = true;\r\n                    }\r\n                } else {\r\n                    loreWithDescription.add(loreLine);\r\n                }\r\n            }\r\n\r\n            if (!descriptionAdded && description != null && !description.isEmpty()) {\r\n                loreWithDescription.add(\"\");\r\n            }\r\n\r\n            itemMeta.setLore(loreWithDescription);\r\n            iconItem.setItemMeta(itemMeta);\r\n\r\n            int slotIndex = y * 9 + x;\r\n            if (slotIndex == 17) {\r\n                slotIndex = 19;\r\n            }\r\n\r\n            menu.setItem(slotIndex, iconItem);\r\n            counter++;\r\n            x = counter % 9 == 0 ? 1 : counter % 9 + 1;\r\n            y = counter / 9 + 1;\r\n        }\r\n\r\n        // Fill empty slots with surrounding items\r\n        for (int i = 0; i < menu.getSize(); i++) {\r\n            if (menu.getItem(i) == null || menu.getItem(i).getType() == Material.AIR) {\r\n                Material material = Material.matchMaterial(ConfigManager.menusConfig.getString(\"queue-gui-type.unranked.surrounding-items\"));\r\n                short durability = (short) ConfigManager.menusConfig.getInt(\"queue-gui-type.unranked.durability\");\r\n                String itemName = ConfigManager.menusConfig.getString(\"queue-gui-type.unranked.surrounding-items-name\");\r\n                ItemStack blueGlassPane = new ItemStack(material, 1, durability);\r\n                ItemMeta glassPaneMeta = blueGlassPane.getItemMeta();\r\n                glassPaneMeta.setDisplayName(CC.translate(itemName));\r\n                glassPaneMeta.addItemFlags(ItemFlag.values());\r\n                blueGlassPane.setItemMeta(glassPaneMeta);\r\n                menu.setItem(i, blueGlassPane);\r\n            }\r\n        }\r\n\r\n        // Open the inventory for the player\r\n        player.openInventory(menu);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java b/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java
--- a/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java	(date 1698852792945)
@@ -1,31 +1,26 @@
 package xyz.kiradev.ui.unranked;
 
+
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
-import org.bukkit.event.Listener;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemFlag;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import xyz.kiradev.managers.ConfigManager;
-import xyz.kiradev.managers.KitManager;
 import xyz.kiradev.types.Kit;
 import xyz.kiradev.utils.render.CC;
 
 import java.util.ArrayList;
 import java.util.List;
 
-public class UnrankedInventoryModern implements Listener {
-    private static KitManager kitManager;
+public class UnrankedInventoryModern {
+    public static Inventory menu;
 
-    public UnrankedInventoryModern(KitManager kitManager) {
-        UnrankedInventoryModern.kitManager = kitManager;
-    }
-
-    public static void openMenu(Player player) {
+    static{
         // Create the inventory
-        Inventory menu = Bukkit.createInventory(null, 9 * ConfigManager.menusConfig.getInt("queue-gui-type.unranked.height"),
+         menu = Bukkit.createInventory(null, 9 * ConfigManager.menusConfig.getInt("queue-gui-type.unranked.height"),
                 CC.translate(ConfigManager.menusConfig.getString("queue-gui-type.unranked.menu-name")));
 
         int counter = 0;
@@ -35,7 +30,7 @@
         List<String> lore = ConfigManager.menusConfig.getStringList(loreKey);
         List<String> translatedLore = new ArrayList<>();
 
-        for (Kit kit : kitManager.getKits()) {
+        for (Kit kit : ConfigManager.kitManager.getKits()) {
             ItemStack iconItem = kit.getIcon();
             ItemMeta itemMeta = iconItem.getItemMeta();
 
@@ -57,9 +52,9 @@
 
             for (String loreLine : translatedLore) {
                 if (loreLine.contains("{playing}")) {
-                    loreWithDescription.add(loreLine.replace("{playing}", Integer.toString(KitManager.getKit(kit.getName()).getPlaying())));
+                    loreWithDescription.add(loreLine.replace("{playing}", Integer.toString(ConfigManager.kitManager.getKit(kit.getName()).getPlaying())));
                 } else if (loreLine.contains("{queueing}")) {
-                    loreWithDescription.add(loreLine.replace("{queueing}", Integer.toString(KitManager.getKit(kit.getName()).getQueue())));
+                    loreWithDescription.add(loreLine.replace("{queueing}", Integer.toString(ConfigManager.kitManager.getKit(kit.getName()).getQueue())));
                 } else if (loreLine.contains("{description}")) {
                     if (description != null && !description.isEmpty()) {
                         loreWithDescription.add(loreLine.replace("{description}", CC.translate(description)));
@@ -102,8 +97,5 @@
                 menu.setItem(i, blueGlassPane);
             }
         }
-
-        // Open the inventory for the player
-        player.openInventory(menu);
     }
 }
\ No newline at end of file
Index: src/main/java/xyz/kiradev/commands/user/RankedCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.commands.user;\r\n\r\nimport org.bukkit.command.Command;\r\nimport org.bukkit.command.CommandExecutor;\r\nimport org.bukkit.command.CommandSender;\r\nimport org.bukkit.entity.Player;\r\nimport xyz.kiradev.managers.ConfigManager;\r\nimport xyz.kiradev.ui.unranked.UnrankedInventoryModern;\r\n\r\npublic class RankedCMD implements CommandExecutor {\r\n\r\n    @Override\r\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\r\n        if (!(sender instanceof Player)) {\r\n            sender.sendMessage(\"Only players can use this command.\");\r\n            return true;\r\n        }\r\n\r\n        Player player = (Player) sender;\r\n        if (ConfigManager.menusConfig.getString(\"kit-editor.ranked.type\").contains(\"modern\")) {\r\n            UnrankedInventoryModern.openMenu(player);\r\n        } else {\r\n            UnrankedInventoryModern.openMenu(player);\r\n        }\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/commands/user/RankedCMD.java b/src/main/java/xyz/kiradev/commands/user/RankedCMD.java
--- a/src/main/java/xyz/kiradev/commands/user/RankedCMD.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/commands/user/RankedCMD.java	(date 1698852619789)
@@ -16,11 +16,11 @@
             return true;
         }
 
-        Player player = (Player) sender;
+        Player p = (Player) sender;
         if (ConfigManager.menusConfig.getString("kit-editor.ranked.type").contains("modern")) {
-            UnrankedInventoryModern.openMenu(player);
+            p.openInventory(UnrankedInventoryModern.menu);
         } else {
-            UnrankedInventoryModern.openMenu(player);
+            p.openInventory(UnrankedInventoryModern.menu);
         }
         return true;
     }
Index: src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.commands.user;\r\n\r\nimport org.bukkit.command.Command;\r\nimport org.bukkit.command.CommandExecutor;\r\nimport org.bukkit.command.CommandSender;\r\nimport org.bukkit.entity.Player;\r\nimport xyz.kiradev.managers.ConfigManager;\r\nimport xyz.kiradev.ui.unranked.UnrankedInventoryLegacy;\r\nimport xyz.kiradev.ui.unranked.UnrankedInventoryModern;\r\n\r\npublic class UnrankedCMD implements CommandExecutor {\r\n\r\n    @Override\r\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\r\n        if (!(sender instanceof Player)) {\r\n            sender.sendMessage(\"Only players can use this command.\");\r\n            return true;\r\n        }\r\n\r\n        Player player = (Player) sender;\r\n        if (ConfigManager.menusConfig.getString(\"queue-gui-type.unranked.type\").contains(\"modern\")) {\r\n            UnrankedInventoryModern.openMenu(player);\r\n        } else {\r\n            UnrankedInventoryLegacy.openMenu(player, ConfigManager.kitsConfig);\r\n        }\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java b/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java
--- a/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java	(date 1698852628380)
@@ -17,11 +17,11 @@
             return true;
         }
 
-        Player player = (Player) sender;
+        Player p = (Player) sender;
         if (ConfigManager.menusConfig.getString("queue-gui-type.unranked.type").contains("modern")) {
-            UnrankedInventoryModern.openMenu(player);
+            p.openInventory(UnrankedInventoryModern.menu);
         } else {
-            UnrankedInventoryLegacy.openMenu(player, ConfigManager.kitsConfig);
+            UnrankedInventoryLegacy.openMenu(p, ConfigManager.kitsConfig);
         }
         return true;
     }
Index: src/main/resources/ui/menus.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Stellar Practice v1.2 | Kira Development\r\n# Legacy = No Glass In menu | Modern = Glass In menu\r\n\r\nqueue-gui-type:\r\n  unranked:\r\n    type: \"modern\" # Menu type: Legacy - Modern\r\n    item-color: \"&b\"\r\n    height: 3\r\n    menu-name: \"&8Unranked Queue\"\r\n    surrounding-items: STAINED_GLASS_PANE\r\n    surrounding-items-name: \" \"\r\n    durability: 7\r\n  ranked:\r\n    type: \"modern\" # Menu type: Legacy - Modern\r\n    item-color: \"&9\"\r\n    height: 3\r\n    menu-name: \"&8Ranked Queue\"\r\n    surrounding-items: STAINED_GLASS_PANE\r\n    surrounding-items-name: \"&bEmpty\"\r\n    durability: 11\r\n  item-meta:\r\n    - \"&7{description}\"\r\n    - \" \"\r\n    - \"&fPlaying: &b{playing}\"\r\n    - \"&fQueuing: &b{queueing}\"\r\n    - \" \"\r\n    - \"&aClick to play.\"\r\nstats:\r\n  menu-name: \"&bStatistics\"\r\n  item-name: \"&bYour Stats\"\r\n  item-meta:\r\n    - \"&7&m-----------------------\"\r\n    - \"&b* Matches Played&7: &f{matches_played}\"\r\n    - \"&b* Wins&7: &f{matches-won}\"\r\n    - \"&b* Lost&7: &f{matches-lost}\"\r\n    - \"&b* ELO&7: &f{elo}\"\r\n    - \"&b* KDR&7: &f{kdr}\"\r\n    - \"&b* TITLE&7: &f{division}\"\r\n    - \"&7&m-----------------------\"\r\nsettings:\r\n  item-color: \"&b\"\r\nkit-editor:\r\n  menu-name: \"&8Kit editor\"\r\n  item-color: \"&b\"\r\n  height: 3\r\n  surrounding-items: STAINED_GLASS_PANE\r\n  surrounding-items-name: \" \"\r\n  durability: 7
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/ui/menus.yml b/src/main/resources/ui/menus.yml
--- a/src/main/resources/ui/menus.yml	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/resources/ui/menus.yml	(date 1698851297245)
@@ -1,4 +1,4 @@
-# Stellar Practice v1.2 | Kira Development
+t# Stellar Practice v1.2 | Kira Development
 # Legacy = No Glass In menu | Modern = Glass In menu
 
 queue-gui-type:
Index: src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\nimport org.bukkit.ChatColor;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.scoreboard.Objective;\r\nimport org.bukkit.scoreboard.Scoreboard;\r\n\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class AssembleThread extends Thread {\r\n\r\n    private Assemble assemble;\r\n\r\n    AssembleThread(Assemble assemble) {\r\n        this.assemble = assemble;\r\n        this.start();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        while (true) {\r\n            //Tick\r\n            try {\r\n                tick();\r\n            } catch (NullPointerException e) {\r\n                e.printStackTrace();\r\n            }\r\n            //Thread Sleep\r\n            try {\r\n                sleep(assemble.getTicks() * 50);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void tick() {\r\n        for (Player player : this.assemble.getPlugin().getServer().getOnlinePlayers()) {\r\n            final AssembleBoard board = this.assemble.getBoards().get(player.getUniqueId());\r\n\r\n            // This shouldn't happen, but just in case\r\n            if (board == null) {\r\n                continue;\r\n            }\r\n\r\n            final Scoreboard scoreboard = board.getScoreboard();\r\n            final Objective objective = board.getObjective();\r\n\r\n\r\n            // Just make a variable so we don't have to\r\n            // process the same thing twice\r\n            final String title = ChatColor.translateAlternateColorCodes('&', this.assemble.getAdapter().getTitle(player));\r\n\r\n            // Update the title if needed\r\n            if (!objective.getName().equals(title)) {\r\n                objective.setDisplayName(title);\r\n            }\r\n\r\n            final List<String> newLines = this.assemble.getAdapter().getLines(player);\r\n\r\n            // Allow adapter to return null/empty list to display nothing\r\n            if (newLines == null || newLines.isEmpty()) {\r\n                board.getEntries().forEach(AssembleBoardEntry::remove);\r\n                board.getEntries().clear();\r\n            } else {\r\n                // Reverse the lines because scoreboard scores are in descending order\r\n                if (!this.assemble.getAssembleStyle().isDescending()) {\r\n                    Collections.reverse(newLines);\r\n                }\r\n\r\n                // Remove excessive amount of board entries\r\n                if (board.getEntries().size() > newLines.size()) {\r\n                    for (int i = newLines.size(); i < board.getEntries().size(); i++) {\r\n                        final AssembleBoardEntry entry = board.getEntryAtPosition(i);\r\n\r\n                        if (entry != null) {\r\n                            entry.remove();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update existing entries / add new entries\r\n                int cache = this.assemble.getAssembleStyle().getStartNumber();\r\n                for (int i = 0; i < newLines.size(); i++) {\r\n                    AssembleBoardEntry entry = board.getEntryAtPosition(i);\r\n\r\n                    // Translate any colors\r\n                    final String line = ChatColor.translateAlternateColorCodes('&', newLines.get(i));\r\n\r\n                    // If the entry is null, just create a new one.\r\n                    // Creating a new AssembleBoardEntry instance will add\r\n                    // itself to the provided board's entries list.\r\n                    if (entry == null) {\r\n                        entry = new AssembleBoardEntry(board, line);\r\n                    }\r\n\r\n                    // Update text, setup the team, and update the display values\r\n                    entry.setText(line);\r\n                    entry.setup();\r\n                    entry.send(this.assemble.getAssembleStyle().isDescending() ? cache-- : cache++);\r\n                }\r\n            }\r\n\r\n            if (player.getScoreboard() != scoreboard) {\r\n                player.setScoreboard(scoreboard);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java b/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java
--- a/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java	(date 1698844824597)
@@ -10,8 +10,13 @@
 
 public class AssembleThread extends Thread {
 
-    private Assemble assemble;
+    private final Assemble assemble;
 
+    /**
+     * Assemble Thread.
+     *
+     * @param assemble instance.
+     */
     AssembleThread(Assemble assemble) {
         this.assemble = assemble;
         this.start();
@@ -20,91 +25,103 @@
     @Override
     public void run() {
         while (true) {
-            //Tick
             try {
                 tick();
-            } catch (NullPointerException e) {
-                e.printStackTrace();
-            }
-            //Thread Sleep
-            try {
                 sleep(assemble.getTicks() * 50);
-            } catch (InterruptedException e) {
+            } catch (Exception e) {
                 e.printStackTrace();
             }
         }
     }
 
+    /**
+     * Tick logic for thread.
+     */
     private void tick() {
         for (Player player : this.assemble.getPlugin().getServer().getOnlinePlayers()) {
-            final AssembleBoard board = this.assemble.getBoards().get(player.getUniqueId());
+            try {
+                AssembleBoard board = this.assemble.getBoards().get(player.getUniqueId());
 
-            // This shouldn't happen, but just in case
-            if (board == null) {
-                continue;
-            }
+                // This shouldn't happen, but just in case.
+                if (board == null) {
+                    continue;
+                }
+
+                Scoreboard scoreboard = board.getScoreboard();
+                Objective objective = board.getObjective();
+
+                if (scoreboard == null || objective == null) {
+                    continue;
+                }
 
-            final Scoreboard scoreboard = board.getScoreboard();
-            final Objective objective = board.getObjective();
-
-
-            // Just make a variable so we don't have to
-            // process the same thing twice
-            final String title = ChatColor.translateAlternateColorCodes('&', this.assemble.getAdapter().getTitle(player));
+                // Just make a variable so we don't have to
+                // process the same thing twice.
+                String title = ChatColor.translateAlternateColorCodes('&', this.assemble.getAdapter().getTitle(player));
 
-            // Update the title if needed
-            if (!objective.getName().equals(title)) {
-                objective.setDisplayName(title);
-            }
+                // Update the title if needed.
+                if (!objective.getDisplayName().equals(title)) {
+                    objective.setDisplayName(title);
+                }
 
-            final List<String> newLines = this.assemble.getAdapter().getLines(player);
+                List<String> newLines = this.assemble.getAdapter().getLines(player);
 
-            // Allow adapter to return null/empty list to display nothing
-            if (newLines == null || newLines.isEmpty()) {
-                board.getEntries().forEach(AssembleBoardEntry::remove);
-                board.getEntries().clear();
-            } else {
-                // Reverse the lines because scoreboard scores are in descending order
-                if (!this.assemble.getAssembleStyle().isDescending()) {
-                    Collections.reverse(newLines);
-                }
+                // Allow adapter to return null/empty list to display nothing.
+                if (newLines == null || newLines.isEmpty()) {
+                    board.getEntries().forEach(AssembleBoardEntry::remove);
+                    board.getEntries().clear();
+                } else {
+                    if (newLines.size() > 15) {
+                        newLines = newLines.subList(0, 15);
+                    }
+
+                    // Reverse the lines because scoreboard scores are in descending order.
+                    if (!this.assemble.getAssembleStyle().isDescending()) {
+                        Collections.reverse(newLines);
+                    }
 
-                // Remove excessive amount of board entries
-                if (board.getEntries().size() > newLines.size()) {
-                    for (int i = newLines.size(); i < board.getEntries().size(); i++) {
-                        final AssembleBoardEntry entry = board.getEntryAtPosition(i);
+                    // Remove excessive amount of board entries.
+                    if (board.getEntries().size() > newLines.size()) {
+                        for (int i = newLines.size(); i < board.getEntries().size(); i++) {
+                            AssembleBoardEntry entry = board.getEntryAtPosition(i);
 
-                        if (entry != null) {
-                            entry.remove();
-                        }
-                    }
-                }
+                            if (entry != null) {
+                                entry.remove();
+                            }
+                        }
+                    }
 
-                // Update existing entries / add new entries
-                int cache = this.assemble.getAssembleStyle().getStartNumber();
-                for (int i = 0; i < newLines.size(); i++) {
-                    AssembleBoardEntry entry = board.getEntryAtPosition(i);
+                    // Update existing entries / add new entries.
+                    int cache = this.assemble.getAssembleStyle().getStartNumber();
+                    for (int i = 0; i < newLines.size(); i++) {
+                        AssembleBoardEntry entry = board.getEntryAtPosition(i);
 
-                    // Translate any colors
-                    final String line = ChatColor.translateAlternateColorCodes('&', newLines.get(i));
+                        // Translate any colors.
+                        String line = ChatColor.translateAlternateColorCodes('&', newLines.get(i));
 
-                    // If the entry is null, just create a new one.
-                    // Creating a new AssembleBoardEntry instance will add
-                    // itself to the provided board's entries list.
-                    if (entry == null) {
-                        entry = new AssembleBoardEntry(board, line);
-                    }
+                        // If the entry is null, just create a new one.
+                        // Creating a new AssembleBoardEntry instance will add
+                        // itself to the provided board's entries list.
+                        if (entry == null) {
+                            entry = new AssembleBoardEntry(board, line, i);
+                        }
 
-                    // Update text, setup the team, and update the display values
-                    entry.setText(line);
-                    entry.setup();
-                    entry.send(this.assemble.getAssembleStyle().isDescending() ? cache-- : cache++);
-                }
-            }
+                        // Update text, setup the team, and update the display values.
+                        entry.setText(line);
+                        entry.setup();
+                        entry.send(
+                                this.assemble.getAssembleStyle().isDescending() ? cache-- : cache++
+                        );
+                    }
+                }
 
-            if (player.getScoreboard() != scoreboard) {
-                player.setScoreboard(scoreboard);
+                if (player.getScoreboard() != scoreboard && !assemble.isHook()) {
+                    player.setScoreboard(scoreboard);
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                throw new AssembleException("There was an error updating " + player.getName() + "'s scoreboard.");
             }
         }
     }
+
 }
Index: src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\n\r\nimport lombok.Getter;\r\nimport xyz.kiradev.utils.assemble.events.AssembleBoardCreateEvent;\r\nimport xyz.kiradev.utils.assemble.events.AssembleBoardDestroyEvent;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.event.EventHandler;\r\nimport org.bukkit.event.Listener;\r\nimport org.bukkit.event.player.PlayerJoinEvent;\r\nimport org.bukkit.event.player.PlayerQuitEvent;\r\n\r\n@Getter\r\npublic class AssembleListener implements Listener {\r\n\r\n\tprivate Assemble assemble;\r\n\r\n\tpublic AssembleListener(Assemble assemble) {\r\n\t\tthis.assemble = assemble;\r\n\t}\r\n\r\n\t@EventHandler\r\n\tpublic void onPlayerJoin(PlayerJoinEvent event) {\r\n\t\tAssembleBoardCreateEvent createEvent = new AssembleBoardCreateEvent(event.getPlayer());\r\n\r\n\t\tBukkit.getPluginManager().callEvent(createEvent);\r\n\t\tif (createEvent.isCancelled()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tgetAssemble().getBoards().put(event.getPlayer().getUniqueId(), new AssembleBoard(event.getPlayer(), getAssemble()));\r\n\t}\r\n\r\n\t@EventHandler\r\n\tpublic void onPlayerQuit(PlayerQuitEvent event) {\r\n\t\tAssembleBoardDestroyEvent destroyEvent = new AssembleBoardDestroyEvent(event.getPlayer());\r\n\r\n\t\tBukkit.getPluginManager().callEvent(destroyEvent);\r\n\t\tif (destroyEvent.isCancelled()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tgetAssemble().getBoards().remove(event.getPlayer().getUniqueId());\r\n\t\tevent.getPlayer().setScoreboard(Bukkit.getScoreboardManager().getMainScoreboard());\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java b/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java
--- a/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java	(date 1698844954074)
@@ -1,47 +1,57 @@
 package xyz.kiradev.utils.assemble;
 
-
 import lombok.Getter;
-import xyz.kiradev.utils.assemble.events.AssembleBoardCreateEvent;
-import xyz.kiradev.utils.assemble.events.AssembleBoardDestroyEvent;
 import org.bukkit.Bukkit;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
+import xyz.kiradev.utils.assemble.events.AssembleBoardCreateEvent;
+import xyz.kiradev.utils.assemble.events.AssembleBoardDestroyEvent;
 
 @Getter
 public class AssembleListener implements Listener {
 
-	private Assemble assemble;
+    private final Assemble assemble;
 
-	public AssembleListener(Assemble assemble) {
-		this.assemble = assemble;
-	}
+    /**
+     * Assemble Listener.
+     *
+     * @param assemble instance.
+     */
+    public AssembleListener(Assemble assemble) {
+        this.assemble = assemble;
+    }
 
-	@EventHandler
-	public void onPlayerJoin(PlayerJoinEvent event) {
-		AssembleBoardCreateEvent createEvent = new AssembleBoardCreateEvent(event.getPlayer());
+    @EventHandler
+    public void onPlayerJoin(PlayerJoinEvent event) {
+        // Call Events if enabled.
+        if (assemble.isCallEvents()) {
+            AssembleBoardCreateEvent createEvent = new AssembleBoardCreateEvent(event.getPlayer());
 
-		Bukkit.getPluginManager().callEvent(createEvent);
-		if (createEvent.isCancelled()) {
-			return;
-		}
+            Bukkit.getPluginManager().callEvent(createEvent);
+            if (createEvent.isCancelled()) {
+                return;
+            }
+        }
 
-		getAssemble().getBoards().put(event.getPlayer().getUniqueId(), new AssembleBoard(event.getPlayer(), getAssemble()));
-	}
+        getAssemble().getBoards().put(event.getPlayer().getUniqueId(), new AssembleBoard(event.getPlayer(), getAssemble()));
+    }
 
-	@EventHandler
-	public void onPlayerQuit(PlayerQuitEvent event) {
-		AssembleBoardDestroyEvent destroyEvent = new AssembleBoardDestroyEvent(event.getPlayer());
+    @EventHandler
+    public void onPlayerQuit(PlayerQuitEvent event) {
+        // Call Events if enabled.
+        if (assemble.isCallEvents()) {
+            AssembleBoardDestroyEvent destroyEvent = new AssembleBoardDestroyEvent(event.getPlayer());
 
-		Bukkit.getPluginManager().callEvent(destroyEvent);
-		if (destroyEvent.isCancelled()) {
-			return;
-		}
+            Bukkit.getPluginManager().callEvent(destroyEvent);
+            if (destroyEvent.isCancelled()) {
+                return;
+            }
+        }
 
-		getAssemble().getBoards().remove(event.getPlayer().getUniqueId());
-		event.getPlayer().setScoreboard(Bukkit.getScoreboardManager().getMainScoreboard());
-	}
+        getAssemble().getBoards().remove(event.getPlayer().getUniqueId());
+        event.getPlayer().setScoreboard(Bukkit.getScoreboardManager().getMainScoreboard());
+    }
 
 }
Index: target/maven-archiver/pom.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Generated by Maven\r\n#Wed Nov 01 14:22:58 CET 2023\r\nversion=1.0\r\ngroupId=Stellar\r\nartifactId=Stellar\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
--- a/target/maven-archiver/pom.properties	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/target/maven-archiver/pom.properties	(date 1698852801883)
@@ -1,5 +1,5 @@
 #Generated by Maven
-#Wed Nov 01 14:22:58 CET 2023
+#Wed Nov 01 16:33:21 CET 2023
 version=1.0
 groupId=Stellar
 artifactId=Stellar
Index: src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\nimport lombok.Getter;\r\n\r\n@Getter\r\npublic enum AssembleStyle {\r\n    MODERN(false, 1);\r\n\r\n    private final boolean descending;\r\n    private final int startNumber;\r\n\r\n    AssembleStyle(boolean descending, int startNumber) {\r\n        this.descending = descending;\r\n        this.startNumber = startNumber;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java b/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java
--- a/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java	(date 1698844824431)
@@ -4,13 +4,35 @@
 
 @Getter
 public enum AssembleStyle {
-    MODERN(false, 1);
 
-    private final boolean descending;
-    private final int startNumber;
+    KOHI(true, 15), VIPER(true, -1), MODERN(false, 1), CUSTOM(false, 0);
 
+    private boolean descending;
+    private int startNumber;
+
+    /**
+     * Assemble Style.
+     *
+     * @param descending  whether the positions are going down or up.
+     * @param startNumber from where to loop from.
+     */
     AssembleStyle(boolean descending, int startNumber) {
         this.descending = descending;
         this.startNumber = startNumber;
     }
+
+    public AssembleStyle reverse() {
+        return descending(!this.descending);
+    }
+
+    public AssembleStyle descending(boolean descending) {
+        this.descending = descending;
+        return this;
+    }
+
+    public AssembleStyle startNumber(int startNumber) {
+        this.startNumber = startNumber;
+        return this;
+    }
+
 }
Index: src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\nimport lombok.Setter;\r\nimport org.bukkit.ChatColor;\r\nimport org.bukkit.scoreboard.Score;\r\nimport org.bukkit.scoreboard.Scoreboard;\r\nimport org.bukkit.scoreboard.Team;\r\n\r\npublic class AssembleBoardEntry {\r\n\r\n\tprivate final AssembleBoard board;\r\n\t@Setter private String text, identifier;\r\n\tprivate Team team;\r\n\r\n\tpublic AssembleBoardEntry(AssembleBoard board, String text) {\r\n\t\tthis.board = board;\r\n\t\tthis.text = text;\r\n\t\tthis.identifier = this.board.getUniqueIdentifier(text);\r\n\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\tpublic void setup() {\r\n\t\tfinal Scoreboard scoreboard = this.board.getScoreboard();\r\n\r\n\t\tif (scoreboard == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tString teamName = this.identifier;\r\n\r\n\t\t// This shouldn't happen, but just in case\r\n\t\tif (teamName.length() > 16) {\r\n\t\t\tteamName = teamName.substring(0, 16);\r\n\t\t}\r\n\r\n\t\tTeam team = scoreboard.getTeam(teamName);\r\n\r\n\t\t// Register the team if it does not exist\r\n\t\tif (team == null) {\r\n\t\t\tteam = scoreboard.registerNewTeam(teamName);\r\n\t\t}\r\n\r\n\t\t// Add the entry to the team\r\n\t\tif (!team.getEntries().contains(this.identifier)) {\r\n\t\t\tteam.addEntry(this.identifier);\r\n\t\t}\r\n\r\n\t\t// Add the entry if it does not exist\r\n\t\tif (!this.board.getEntries().contains(this)) {\r\n\t\t\tthis.board.getEntries().add(this);\r\n\t\t}\r\n\r\n\t\tthis.team = team;\r\n\t}\r\n\r\n\tpublic void send(int position) {\r\n\t\tif (this.text.length() > 16) {\r\n\t\t\tString prefix = this.text.substring(0, 16);\r\n\t\t\tString suffix;\r\n\r\n\t\t\tif (prefix.charAt(15) == ChatColor.COLOR_CHAR) {\r\n\t\t\t\tprefix = prefix.substring(0, 15);\r\n\t\t\t\tsuffix = this.text.substring(15, this.text.length());\r\n\t\t\t} else if (prefix.charAt(14) == ChatColor.COLOR_CHAR) {\r\n\t\t\t\tprefix = prefix.substring(0, 14);\r\n\t\t\t\tsuffix = this.text.substring(14, this.text.length());\r\n\t\t\t} else {\r\n\t\t\t\tif (ChatColor.getLastColors(prefix).equalsIgnoreCase(ChatColor.getLastColors(this.identifier))) {\r\n\t\t\t\t\tsuffix = this.text.substring(16, this.text.length());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsuffix = ChatColor.getLastColors(prefix) + this.text.substring(16, this.text.length());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (suffix.length() > 16) {\r\n\t\t\t\tsuffix = suffix.substring(0, 16);\r\n\t\t\t}\r\n\r\n\t\t\tthis.team.setPrefix(prefix);\r\n\t\t\tthis.team.setSuffix(suffix);\r\n\t\t} else {\r\n\t\t\tthis.team.setPrefix(this.text);\r\n\t\t\tthis.team.setSuffix(\"\");\r\n\t\t}\r\n\r\n\t\tScore score = this.board.getObjective().getScore(this.identifier);\r\n\t\tscore.setScore(position);\r\n\t}\r\n\r\n\tpublic void remove() {\r\n\t\tthis.board.getIdentifiers().remove(this.identifier);\r\n\t\tthis.board.getScoreboard().resetScores(this.identifier);\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java b/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java
--- a/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java	(date 1698844824372)
@@ -1,97 +1,90 @@
 package xyz.kiradev.utils.assemble;
 
 import lombok.Setter;
-import org.bukkit.ChatColor;
-import org.bukkit.scoreboard.Score;
 import org.bukkit.scoreboard.Scoreboard;
 import org.bukkit.scoreboard.Team;
 
 public class AssembleBoardEntry {
 
-	private final AssembleBoard board;
-	@Setter private String text, identifier;
-	private Team team;
+    private final AssembleBoard board;
+
+    private Team team;
+    @Setter
+    private String text, identifier;
 
-	public AssembleBoardEntry(AssembleBoard board, String text) {
-		this.board = board;
-		this.text = text;
-		this.identifier = this.board.getUniqueIdentifier(text);
+    /**
+     * Assemble Board Entry
+     *
+     * @param board    that entry belongs to.
+     * @param text     of entry.
+     * @param position of entry.
+     */
+    public AssembleBoardEntry(AssembleBoard board, String text, int position) {
+        this.board = board;
+        this.text = text;
+        this.identifier = this.board.getUniqueIdentifier(position);
 
-		this.setup();
-	}
+        this.setup();
+    }
 
-	public void setup() {
-		final Scoreboard scoreboard = this.board.getScoreboard();
+    /**
+     * Setup Board Entry.
+     */
+    public void setup() {
+        final Scoreboard scoreboard = this.board.getScoreboard();
 
-		if (scoreboard == null) {
-			return;
-		}
+        if (scoreboard == null) {
+            return;
+        }
 
-
-		String teamName = this.identifier;
+        String teamName = this.identifier;
 
-		// This shouldn't happen, but just in case
-		if (teamName.length() > 16) {
-			teamName = teamName.substring(0, 16);
-		}
+        // This shouldn't happen, but just in case.
+        if (teamName.length() > 16) {
+            teamName = teamName.substring(0, 16);
+        }
 
-		Team team = scoreboard.getTeam(teamName);
+        Team team = scoreboard.getTeam(teamName);
 
-		// Register the team if it does not exist
-		if (team == null) {
-			team = scoreboard.registerNewTeam(teamName);
-		}
+        // Register the team if it does not exist.
+        if (team == null) {
+            team = scoreboard.registerNewTeam(teamName);
+        }
 
-		// Add the entry to the team
-		if (!team.getEntries().contains(this.identifier)) {
-			team.addEntry(this.identifier);
-		}
+        // Add the entry to the team.
+        if (!team.getEntries().contains(this.identifier)) {
+            team.addEntry(this.identifier);
+        }
 
-		// Add the entry if it does not exist
-		if (!this.board.getEntries().contains(this)) {
-			this.board.getEntries().add(this);
-		}
+        // Add the entry if it does not exist.
+        if (!this.board.getEntries().contains(this)) {
+            this.board.getEntries().add(this);
+        }
 
-		this.team = team;
-	}
+        this.team = team;
+    }
 
-	public void send(int position) {
-		if (this.text.length() > 16) {
-			String prefix = this.text.substring(0, 16);
-			String suffix;
-
-			if (prefix.charAt(15) == ChatColor.COLOR_CHAR) {
-				prefix = prefix.substring(0, 15);
-				suffix = this.text.substring(15, this.text.length());
-			} else if (prefix.charAt(14) == ChatColor.COLOR_CHAR) {
-				prefix = prefix.substring(0, 14);
-				suffix = this.text.substring(14, this.text.length());
-			} else {
-				if (ChatColor.getLastColors(prefix).equalsIgnoreCase(ChatColor.getLastColors(this.identifier))) {
-					suffix = this.text.substring(16, this.text.length());
-				} else {
-					suffix = ChatColor.getLastColors(prefix) + this.text.substring(16, this.text.length());
-				}
-			}
+    /**
+     * Send Board Entry Update.
+     *
+     * @param position of entry.
+     */
+    public void send(int position) {
+        // Set Prefix & Suffix.
+        String[] split = AssembleUtils.splitTeamText(text);
+        this.team.setPrefix(split[0]);
+        this.team.setSuffix(split[1]);
 
-			if (suffix.length() > 16) {
-				suffix = suffix.substring(0, 16);
-			}
+        // Set the score
+        this.board.getObjective().getScore(this.identifier).setScore(position);
+    }
 
-			this.team.setPrefix(prefix);
-			this.team.setSuffix(suffix);
-		} else {
-			this.team.setPrefix(this.text);
-			this.team.setSuffix("");
-		}
-
-		Score score = this.board.getObjective().getScore(this.identifier);
-		score.setScore(position);
-	}
-
-	public void remove() {
-		this.board.getIdentifiers().remove(this.identifier);
-		this.board.getScoreboard().resetScores(this.identifier);
-	}
+    /**
+     * Remove Board Entry from Board.
+     */
+    public void remove() {
+        this.board.getIdentifiers().remove(this.identifier);
+        this.board.getScoreboard().resetScores(this.identifier);
+    }
 
 }
Index: src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\nimport org.bukkit.entity.Player;\r\n\r\nimport java.util.List;\r\n\r\npublic interface AssembleAdapter {\r\n\r\n\tString getTitle(Player player);\r\n\r\n\tList<String> getLines(Player player);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java b/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java
--- a/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java	(date 1698844824622)
@@ -6,8 +6,20 @@
 
 public interface AssembleAdapter {
 
-	String getTitle(Player player);
+    /**
+     * Get's the scoreboard title.
+     *
+     * @param player who's title is being displayed.
+     * @return title.
+     */
+    String getTitle(Player player);
 
-	List<String> getLines(Player player);
+    /**
+     * Get's the scoreboard lines.
+     *
+     * @param player who's lines are being displayed.
+     * @return lines.
+     */
+    List<String> getLines(Player player);
 
 }
Index: src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\nimport lombok.Getter;\r\nimport xyz.kiradev.utils.assemble.events.AssembleBoardCreatedEvent;\r\nimport org.bukkit.Bukkit;\r\nimport org.bukkit.ChatColor;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.scoreboard.DisplaySlot;\r\nimport org.bukkit.scoreboard.Objective;\r\nimport org.bukkit.scoreboard.Scoreboard;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\n\r\n@Getter\r\npublic class AssembleBoard {\r\n\r\n\tprivate final List<AssembleBoardEntry> entries = new ArrayList<>();\r\n\tprivate final List<String> identifiers = new ArrayList<>();\r\n\tprivate Scoreboard scoreboard;\r\n\tprivate Objective objective;\r\n\r\n\tprivate UUID uuid;\r\n\r\n\tprivate Assemble assemble;\r\n\r\n\tpublic AssembleBoard(Player player, Assemble assemble) {\r\n\t\tthis.assemble = assemble;\r\n\t\tthis.setup(player);\r\n\t\tthis.uuid = player.getUniqueId();\r\n\t}\r\n\r\n\tprivate void setup(Player player) {\r\n\r\n\r\n\t\t// Register new scoreboard if needed\r\n\t\tif (getAssemble().isHook() || !(player.getScoreboard() == Bukkit.getScoreboardManager().getMainScoreboard())) {\r\n\t\t\tthis.scoreboard = player.getScoreboard();\r\n\t\t} else {\r\n\t\t\tthis.scoreboard = Bukkit.getScoreboardManager().getNewScoreboard();\r\n\t\t}\r\n\r\n\t\t// Setup sidebar objective\r\n\t\tthis.objective = this.scoreboard.registerNewObjective(\"Default\", \"dummy\");\r\n\t\tthis.objective.setDisplaySlot(DisplaySlot.SIDEBAR);\r\n\r\n\r\n\t\t/*\r\n\t\tfor (Player player1 : FrozedSumo.plugin.getServer().getOnlinePlayers()) {\r\n\t\t\tTeam team = null;\r\n\t\t\t//team = this.scoreboard.registerNewTeam(player1.getName());\r\n\r\n\r\n\t\t\tif (scoreboard.getTeam(player1.getName()) == null) {\r\n\t\t\t\tteam = scoreboard.registerNewTeam(player1.getName());\r\n\t\t\t}else {\r\n\t\t\t\tteam = scoreboard.getTeam(player1.getName());\r\n\t\t\t}\r\n\t\t\tteam.setPrefix(FrozedSumo.plugin.getConfig().getString(\"Settings.namecolor\").replace(\"&\", \"§\"));\r\n\t\t\tteam.addPlayer(player1);\r\n\t\t}*/\r\n\r\n\r\n\t\t// Update scoreboard\r\n\t\tplayer.setScoreboard(this.scoreboard);\r\n\t\t//Send Update\r\n\t\tAssembleBoardCreatedEvent createdEvent = new AssembleBoardCreatedEvent(this);\r\n\t\tBukkit.getPluginManager().callEvent(createdEvent);\r\n\t}\r\n\r\n\tpublic AssembleBoardEntry getEntryAtPosition(int pos) {\r\n\t\tif (pos >= this.entries.size()) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\treturn this.entries.get(pos);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic String getUniqueIdentifier(String text) {\r\n\t\tString identifier = getRandomChatColor() + ChatColor.WHITE;\r\n\r\n\t\twhile (this.identifiers.contains(identifier)) {\r\n\t\t\tidentifier = identifier + getRandomChatColor() + ChatColor.WHITE;\r\n\t\t}\r\n\r\n\t\t// This is rare, but just in case, make the method recursive\r\n\t\tif (identifier.length() > 16) {\r\n\t\t\treturn this.getUniqueIdentifier(text);\r\n\t\t}\r\n\r\n\t\t// Add our identifier to the list so there are no duplicates\r\n\t\tthis.identifiers.add(identifier);\r\n\r\n\t\treturn identifier;\r\n\t}\r\n\r\n\t// Gets a random ChatColor and returns the String value of it\r\n\tprivate static String getRandomChatColor() {\r\n\t\treturn ChatColor.values()[ThreadLocalRandom.current().nextInt(ChatColor.values().length)].toString();\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java b/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java
--- a/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java	(date 1698844926198)
@@ -1,103 +1,130 @@
 package xyz.kiradev.utils.assemble;
 
 import lombok.Getter;
-import xyz.kiradev.utils.assemble.events.AssembleBoardCreatedEvent;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Scoreboard;
+import xyz.kiradev.utils.assemble.events.AssembleBoardCreatedEvent;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
-import java.util.concurrent.ThreadLocalRandom;
 
 @Getter
 public class AssembleBoard {
 
-	private final List<AssembleBoardEntry> entries = new ArrayList<>();
-	private final List<String> identifiers = new ArrayList<>();
-	private Scoreboard scoreboard;
-	private Objective objective;
+    private final Assemble assemble;
+
+    private final List<AssembleBoardEntry> entries = new ArrayList<>();
+    private final List<String> identifiers = new ArrayList<>();
 
-	private UUID uuid;
+    private final UUID uuid;
 
-	private Assemble assemble;
-
-	public AssembleBoard(Player player, Assemble assemble) {
-		this.assemble = assemble;
-		this.setup(player);
-		this.uuid = player.getUniqueId();
-	}
+    /**
+     * Assemble Board.
+     *
+     * @param player   that the board belongs to.
+     * @param assemble instance.
+     */
+    public AssembleBoard(Player player, Assemble assemble) {
+        this.uuid = player.getUniqueId();
+        this.assemble = assemble;
+        this.setup(player);
+    }
 
-	private void setup(Player player) {
-
-
-		// Register new scoreboard if needed
-		if (getAssemble().isHook() || !(player.getScoreboard() == Bukkit.getScoreboardManager().getMainScoreboard())) {
-			this.scoreboard = player.getScoreboard();
-		} else {
-			this.scoreboard = Bukkit.getScoreboardManager().getNewScoreboard();
-		}
-
-		// Setup sidebar objective
-		this.objective = this.scoreboard.registerNewObjective("Default", "dummy");
-		this.objective.setDisplaySlot(DisplaySlot.SIDEBAR);
+    /**
+     * Get's a player's bukkit scoreboard.
+     *
+     * @return either existing scoreboard or new scoreboard.
+     */
+    public Scoreboard getScoreboard() {
+        Player player = Bukkit.getPlayer(getUuid());
+        if (getAssemble().isHook() || player.getScoreboard() != Bukkit.getScoreboardManager().getMainScoreboard()) {
+            return player.getScoreboard();
+        } else {
+            return Bukkit.getScoreboardManager().getNewScoreboard();
+        }
+    }
 
-
-		/*
-		for (Player player1 : FrozedSumo.plugin.getServer().getOnlinePlayers()) {
-			Team team = null;
-			//team = this.scoreboard.registerNewTeam(player1.getName());
-
-
-			if (scoreboard.getTeam(player1.getName()) == null) {
-				team = scoreboard.registerNewTeam(player1.getName());
-			}else {
-				team = scoreboard.getTeam(player1.getName());
-			}
-			team.setPrefix(FrozedSumo.plugin.getConfig().getString("Settings.namecolor").replace("&", "§"));
-			team.addPlayer(player1);
-		}*/
+    /**
+     * Get's the player's scoreboard objective.
+     *
+     * @return either existing objecting or new objective.
+     */
+    public Objective getObjective() {
+        Scoreboard scoreboard = getScoreboard();
+        if (scoreboard.getObjective("Assemble") == null) {
+            Objective objective = scoreboard.registerNewObjective("Assemble", "dummy");
+            objective.setDisplaySlot(DisplaySlot.SIDEBAR);
+            objective.setDisplayName(getAssemble().getAdapter().getTitle(Bukkit.getPlayer(getUuid())));
+            return objective;
+        } else {
+            return scoreboard.getObjective("Assemble");
+        }
+    }
 
+    /**
+     * Setup the board.
+     *
+     * @param player who's board to setup.
+     */
+    private void setup(Player player) {
+        Scoreboard scoreboard = getScoreboard();
+        player.setScoreboard(scoreboard);
+        getObjective();
 
-		// Update scoreboard
-		player.setScoreboard(this.scoreboard);
-		//Send Update
-		AssembleBoardCreatedEvent createdEvent = new AssembleBoardCreatedEvent(this);
-		Bukkit.getPluginManager().callEvent(createdEvent);
-	}
+        // Call Events if enabled.
+        if (assemble.isCallEvents()) {
+            AssembleBoardCreatedEvent createdEvent = new AssembleBoardCreatedEvent(this);
+            Bukkit.getPluginManager().callEvent(createdEvent);
+        }
+    }
 
-	public AssembleBoardEntry getEntryAtPosition(int pos) {
-		if (pos >= this.entries.size()) {
-			return null;
-		} else {
-			return this.entries.get(pos);
-		}
-	}
+    /**
+     * Get the board entry at a specific position.
+     *
+     * @param pos to find entry.
+     * @return entry if it isn't out of range.
+     */
+    public AssembleBoardEntry getEntryAtPosition(int pos) {
+        return pos >= this.entries.size() ? null : this.entries.get(pos);
+    }
 
-	public String getUniqueIdentifier(String text) {
-		String identifier = getRandomChatColor() + ChatColor.WHITE;
+    /**
+     * Get the unique identifier for position in scoreboard.
+     *
+     * @param position for identifier.
+     * @return unique identifier.
+     */
+    public String getUniqueIdentifier(int position) {
+        String identifier = getRandomChatColor(position) + ChatColor.WHITE;
 
-		while (this.identifiers.contains(identifier)) {
-			identifier = identifier + getRandomChatColor() + ChatColor.WHITE;
-		}
+        while (this.identifiers.contains(identifier)) {
+            identifier = identifier + getRandomChatColor(position) + ChatColor.WHITE;
+        }
 
-		// This is rare, but just in case, make the method recursive
-		if (identifier.length() > 16) {
-			return this.getUniqueIdentifier(text);
-		}
+        // This is rare, but just in case, make the method recursive
+        if (identifier.length() > 16) {
+            return this.getUniqueIdentifier(position);
+        }
 
-		// Add our identifier to the list so there are no duplicates
-		this.identifiers.add(identifier);
+        // Add our identifier to the list so there are no duplicates
+        this.identifiers.add(identifier);
 
-		return identifier;
-	}
+        return identifier;
+    }
 
-	// Gets a random ChatColor and returns the String value of it
-	private static String getRandomChatColor() {
-		return ChatColor.values()[ThreadLocalRandom.current().nextInt(ChatColor.values().length)].toString();
-	}
+    /**
+     * Gets a ChatColor based off the position in the collection.
+     *
+     * @param position of entry.
+     * @return ChatColor adjacent to position.
+     */
+    private String getRandomChatColor(int position) {
+        return assemble.getChatColorCache()[position].toString();
+    }
+
 }
Index: src/main/java/xyz/kiradev/utils/assemble/Assemble.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.bukkit.event.HandlerList;\r\nimport org.bukkit.plugin.java.JavaPlugin;\r\n\r\nimport java.util.Map;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\n@Getter @Setter\r\npublic class Assemble {\r\n\r\n\tprivate JavaPlugin plugin;\r\n\tprivate AssembleAdapter adapter;\r\n\tprivate Map<UUID, AssembleBoard> boards;\r\n\tprivate AssembleThread thread;\r\n\tprivate AssembleListener listeners;\r\n\tprivate long ticks = 1;\r\n\tprivate boolean hook = false;\r\n\tprivate AssembleStyle assembleStyle = AssembleStyle.MODERN;\r\n\r\n\tpublic Assemble(JavaPlugin plugin, AssembleAdapter adapter) {\r\n\t\tif (plugin == null) {\r\n\t\t\tthrow new RuntimeException(\"Assemble can not be instantiated without a plugin instance!\");\r\n\t\t}\r\n\r\n\t\tthis.plugin = plugin;\r\n\t\tthis.adapter = adapter;\r\n\t\tthis.boards = new ConcurrentHashMap<>();\r\n\r\n\t\tthis.setup();\r\n\t}\r\n\r\n\tprivate void setup() {\r\n\t\tlisteners = new AssembleListener(this);\r\n\t\t//Register Events\r\n\t\tthis.plugin.getServer().getPluginManager().registerEvents(listeners, this.plugin);\r\n\r\n\t\t//Ensure that the thread has stopped running\r\n\t\tif (this.thread != null) {\r\n\t\t\tthis.thread.stop();\r\n\t\t\tthis.thread = null;\r\n\t\t}\r\n\r\n\t\t//Start Thread\r\n\t\tthis.thread = new AssembleThread(this);\r\n\t}\r\n\r\n\tpublic void cleanup() {\r\n\t\tif (this.thread != null) {\r\n\t\t\tthis.thread.stop();\r\n\t\t\tthis.thread = null;\r\n\t\t}\r\n\r\n\t\tif (listeners != null) {\r\n\t\t\tHandlerList.unregisterAll(listeners);\r\n\t\t\tlisteners = null;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/Assemble.java b/src/main/java/xyz/kiradev/utils/assemble/Assemble.java
--- a/src/main/java/xyz/kiradev/utils/assemble/Assemble.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/Assemble.java	(date 1698844938000)
@@ -2,62 +2,110 @@
 
 import lombok.Getter;
 import lombok.Setter;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.plugin.java.JavaPlugin;
+import xyz.kiradev.utils.assemble.events.AssembleBoardCreateEvent;
 
 import java.util.Map;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
-@Getter @Setter
+@Getter
+@Setter
 public class Assemble {
 
-	private JavaPlugin plugin;
-	private AssembleAdapter adapter;
-	private Map<UUID, AssembleBoard> boards;
-	private AssembleThread thread;
-	private AssembleListener listeners;
-	private long ticks = 1;
-	private boolean hook = false;
-	private AssembleStyle assembleStyle = AssembleStyle.MODERN;
+    private final JavaPlugin plugin;
+    private final ChatColor[] chatColorCache = ChatColor.values();
+    private AssembleAdapter adapter;
+    private AssembleThread thread;
+    private AssembleListener listeners;
+    private AssembleStyle assembleStyle = AssembleStyle.MODERN;
+    private Map<UUID, AssembleBoard> boards;
+    private long ticks = 2;
+    private boolean hook = false, debugMode = true, callEvents = true;
 
-	public Assemble(JavaPlugin plugin, AssembleAdapter adapter) {
-		if (plugin == null) {
-			throw new RuntimeException("Assemble can not be instantiated without a plugin instance!");
-		}
+    /**
+     * Assemble.
+     *
+     * @param plugin  instance.
+     * @param adapter that is being provided.
+     */
+    public Assemble(JavaPlugin plugin, AssembleAdapter adapter) {
+        if (plugin == null) {
+            throw new RuntimeException("Assemble can not be instantiated without a plugin instance!");
+        }
 
-		this.plugin = plugin;
-		this.adapter = adapter;
-		this.boards = new ConcurrentHashMap<>();
+        this.plugin = plugin;
+        this.adapter = adapter;
+        this.boards = new ConcurrentHashMap<>();
 
-		this.setup();
-	}
+        this.setup();
+    }
 
-	private void setup() {
-		listeners = new AssembleListener(this);
-		//Register Events
-		this.plugin.getServer().getPluginManager().registerEvents(listeners, this.plugin);
+    /**
+     * Setup Assemble.
+     */
+    public void setup() {
+        // Register Events.
+        this.listeners = new AssembleListener(this);
+        this.plugin.getServer().getPluginManager().registerEvents(listeners, this.plugin);
 
-		//Ensure that the thread has stopped running
-		if (this.thread != null) {
-			this.thread.stop();
-			this.thread = null;
-		}
+        // Ensure that the thread has stopped running.
+        if (this.thread != null) {
+            this.thread.stop();
+            this.thread = null;
+        }
 
-		//Start Thread
-		this.thread = new AssembleThread(this);
-	}
+        // Register new boards for existing online players.
+        for (Player player : this.getPlugin().getServer().getOnlinePlayers()) {
+
+            // Call Events if enabled.
+            if (this.isCallEvents()) {
+                AssembleBoardCreateEvent createEvent = new AssembleBoardCreateEvent(player);
+
+                Bukkit.getPluginManager().callEvent(createEvent);
+                if (createEvent.isCancelled()) {
+                    continue;
+                }
+            }
+
+            getBoards().putIfAbsent(player.getUniqueId(), new AssembleBoard(player, this));
+        }
+
+        // Start Thread.
+        this.thread = new AssembleThread(this);
+    }
 
-	public void cleanup() {
-		if (this.thread != null) {
-			this.thread.stop();
-			this.thread = null;
-		}
+    /**
+     * Cleanup Assemble.
+     */
+    public void cleanup() {
+        // Stop thread.
+        if (this.thread != null) {
+            this.thread.stop();
+            this.thread = null;
+        }
 
-		if (listeners != null) {
-			HandlerList.unregisterAll(listeners);
-			listeners = null;
-		}
-	}
+        // Unregister listeners.
+        if (listeners != null) {
+            HandlerList.unregisterAll(listeners);
+            listeners = null;
+        }
+
+        // Destroy player scoreboards.
+        for (UUID uuid : getBoards().keySet()) {
+            Player player = Bukkit.getPlayer(uuid);
+
+            if (player == null || !player.isOnline()) {
+                continue;
+            }
+
+            getBoards().remove(uuid);
+            player.setScoreboard(Bukkit.getScoreboardManager().getNewScoreboard());
+        }
+    }
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"617ba883-ed92-47d4-8c3a-8e7c598a687b\" name=\"Changes\" comment=\"Added /kit save and /arena save\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/Placeholder.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/Placeholder.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/Stellar.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/Stellar.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/KitsCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/KitsCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/MainCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/MainCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/SetSpawnCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/SetSpawnCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/KitEditorCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/KitEditorCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/LeaveQueueCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/LeaveQueueCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/PingCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/PingCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/QueueCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/QueueCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/RankedCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/RankedCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/SettingsCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/SettingsCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/StatsCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/StatsCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/BlockListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/BlockListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/GameListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/GameListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/KitEditorListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/KitEditorListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/MenuListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/MenuListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerDataListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerDataListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerJoin.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerJoin.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/SpawnListeners.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/SpawnListeners.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/StatsListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/StatsListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/WorldListener.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/WorldListener.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ArenaManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ArenaManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ConfigManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ConfigManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/DivisionsManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/DivisionsManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/GameManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/GameManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/InventoryManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/InventoryManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/KitManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/KitManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/MatchManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/MatchManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/QueueManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/QueueManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ScoreboardManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ScoreboardManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Arena.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Arena.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Data.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Data.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Division.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Division.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Kit.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Kit.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Match.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Match.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/KitEditorInventory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/KitEditorInventory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsInventory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsInventory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsKillEffectsInventory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsKillEffectsInventory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/StatsInventory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/StatsInventory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryLegacy.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryLegacy.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/Cooldowns.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/Cooldowns.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/DiscordUtils.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/DiscordUtils.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/LocationUtil.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/LocationUtil.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/PlayerUtils.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/PlayerUtils.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/Assemble.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardCreateEvent.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardCreatedEvent.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/Console.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/Console.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/ItemBuilder.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/ItemBuilder.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/features/messages.yml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/features/messages.yml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/Stellar-1.0.jar\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/Stellar-1.0.jar\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/maven-archiver/pom.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/maven-archiver/pom.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2XZ18JFg1ZHd39NbWFyG4ngLin6\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Stellar&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Stellar\" type=\"MavenRunConfiguration\" factoryName=\"Maven\" nameIsGenerated=\"true\">\r\n      <MavenSettings>\r\n        <option name=\"myGeneralSettings\" />\r\n        <option name=\"myRunnerSettings\" />\r\n        <option name=\"myRunnerParameters\">\r\n          <MavenRunnerParameters>\r\n            <option name=\"profiles\">\r\n              <set />\r\n            </option>\r\n            <option name=\"goals\">\r\n              <list />\r\n            </option>\r\n            <option name=\"pomFileName\" />\r\n            <option name=\"profilesMap\">\r\n              <map />\r\n            </option>\r\n            <option name=\"resolveToWorkspace\" value=\"false\" />\r\n            <option name=\"workingDirPath\" value=\"$PROJECT_DIR$\" />\r\n          </MavenRunnerParameters>\r\n        </option>\r\n      </MavenSettings>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"617ba883-ed92-47d4-8c3a-8e7c598a687b\" name=\"Changes\" comment=\"\" />\r\n      <created>1698821629918</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1698821629918</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Players can now only break when playing build kit\">\r\n      <created>1698822751957</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698822751957</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Fixed scoreboard\">\r\n      <created>1698826369389</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1698826369389</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Players can now only break when playing build kit\" />\r\n    <MESSAGE value=\"Fixed scoreboard\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed scoreboard\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/.idea/workspace.xml	(date 1698855683912)
@@ -4,69 +4,68 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="617ba883-ed92-47d4-8c3a-8e7c598a687b" name="Changes" comment="Added /kit save and /arena save">
+    <list default="true" id="617ba883-ed92-47d4-8c3a-8e7c598a687b" name="Changes" comment="Updated Assemble">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/Placeholder.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/Placeholder.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/Stellar.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/Stellar.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/KitsCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/KitsCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/MainCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/MainCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/SetSpawnCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/admin/SetSpawnCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/KitEditorCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/KitEditorCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/LeaveQueueCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/LeaveQueueCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/PingCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/PingCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/QueueCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/QueueCMD.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/RankedCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/RankedCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/SettingsCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/SettingsCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/StatsCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/StatsCMD.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/commands/user/UnrankedCMD.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/BlockListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/BlockListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/GameListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/GameListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/KitEditorListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/KitEditorListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/MenuListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/MenuListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerDataListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerDataListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerJoin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/PlayerJoin.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/SpawnListeners.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/SpawnListeners.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/StatsListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/StatsListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/WorldListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/listeners/WorldListener.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ArenaManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ArenaManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ConfigManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ConfigManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/DivisionsManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/DivisionsManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/GameManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/GameManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/InventoryManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/InventoryManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/KitManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/KitManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/MatchManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/MatchManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/QueueManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/QueueManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ScoreboardManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/managers/ScoreboardManager.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Arena.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Arena.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Data.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Data.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Division.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Division.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Kit.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Kit.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Match.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/types/Match.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/KitEditorInventory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/KitEditorInventory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsInventory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsInventory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsKillEffectsInventory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/SettingsKillEffectsInventory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/StatsInventory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/StatsInventory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryLegacy.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryLegacy.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/ui/unranked/UnrankedInventoryModern.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/Cooldowns.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/Cooldowns.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/DiscordUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/DiscordUtils.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/LocationUtil.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/LocationUtil.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/PlayerUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/PlayerUtils.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/Assemble.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardCreateEvent.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardCreatedEvent.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/Console.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/Console.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/ItemBuilder.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/render/ItemBuilder.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/features/messages.yml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/features/messages.yml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/Assemble.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/Assemble.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleAdapter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleBoardEntry.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleListener.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleStyle.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/AssembleThread.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/ui/menus.yml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/ui/menus.yml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/Stellar-1.0.jar" beforeDir="false" afterPath="$PROJECT_DIR$/target/Stellar-1.0.jar" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/features/messages.yml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/features/messages.yml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/ui/menus.yml" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/ui/menus.yml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/Placeholder.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/Placeholder.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/Stellar.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/Stellar.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/admin/ArenaCMD.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/admin/ArenaCMD.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/admin/KitsCMD.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/admin/KitsCMD.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/admin/MainCMD.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/admin/MainCMD.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/user/RankedCMD.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/user/RankedCMD.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/user/UnrankedCMD.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/commands/user/UnrankedCMD.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/BlockListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/BlockListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/MenuListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/MenuListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/PlayerDataListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/PlayerDataListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/listeners/RulesListener.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ArenaManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ArenaManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ConfigManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ConfigManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/DivisionsManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/DivisionsManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/GameManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/GameManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/InventoryManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/InventoryManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/KitManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/KitManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/MatchManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/MatchManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ScoreboardManager$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ScoreboardManager$1.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ScoreboardManager.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/managers/ScoreboardManager.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Arena.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Arena.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Data.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Data.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Division.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Division.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Kit.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Kit.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Match.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/types/Match.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/ui/StatsInventory.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/ui/StatsInventory.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/ui/unranked/UnrankedInventoryModern.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/ui/unranked/UnrankedInventoryModern.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/Cooldowns.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/Cooldowns.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/DiscordUtils.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/DiscordUtils.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/PlayerUtils.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/PlayerUtils.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/Assemble.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/Assemble.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleBoard.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleBoard.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleBoardEntry.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleBoardEntry.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleListener.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleListener.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleStyle.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleStyle.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleThread.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/AssembleThread.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/events/AssembleBoardCreateEvent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/events/AssembleBoardCreateEvent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/events/AssembleBoardCreatedEvent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/events/AssembleBoardCreatedEvent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/render/Console.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/render/Console.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/render/ItemBuilder.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/xyz/kiradev/utils/render/ItemBuilder.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/maven-archiver/pom.properties" beforeDir="false" afterPath="$PROJECT_DIR$/target/maven-archiver/pom.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst" beforeDir="false" afterPath="$PROJECT_DIR$/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst" beforeDir="false" afterPath="$PROJECT_DIR$/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -141,12 +140,20 @@
       <option name="project" value="LOCAL" />
       <updated>1698826369389</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Updated Assemble">
+      <created>1698845374404</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1698845374404</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Players can now only break when playing build kit" />
     <MESSAGE value="Fixed scoreboard" />
-    <option name="LAST_COMMIT_MESSAGE" value="Fixed scoreboard" />
+    <MESSAGE value="Updated Assemble" />
+    <option name="LAST_COMMIT_MESSAGE" value="Updated Assemble" />
   </component>
 </project>
\ No newline at end of file
Index: target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>xyz\\kiradev\\commands\\user\\UnrankedCMD.class\r\nxyz\\kiradev\\player\\PlayerState.class\r\nxyz\\kiradev\\utils\\assemble\\events\\AssembleBoardCreateEvent.class\r\nxyz\\kiradev\\commands\\admin\\KitsCMD.class\r\nxyz\\kiradev\\types\\Match.class\r\nxyz\\kiradev\\utils\\render\\ItemBuilder.class\r\nxyz\\kiradev\\commands\\admin\\MainCMD.class\r\nxyz\\kiradev\\utils\\assemble\\AssembleBoardEntry.class\r\nxyz\\kiradev\\Constants.class\r\nxyz\\kiradev\\listeners\\SpawnListeners.class\r\nxyz\\kiradev\\ui\\SettingsInventory.class\r\nxyz\\kiradev\\listeners\\WorldListener.class\r\nxyz\\kiradev\\commands\\user\\RankedCMD.class\r\nxyz\\kiradev\\managers\\QueueManager.class\r\nxyz\\kiradev\\managers\\MatchManager.class\r\nxyz\\kiradev\\utils\\assemble\\AssembleThread.class\r\nxyz\\kiradev\\utils\\assemble\\AssembleListener.class\r\nxyz\\kiradev\\listeners\\KitEditorListener.class\r\nxyz\\kiradev\\managers\\KitManager.class\r\nxyz\\kiradev\\utils\\assemble\\events\\AssembleBoardCreatedEvent.class\r\nxyz\\kiradev\\types\\Kit.class\r\nxyz\\kiradev\\listeners\\BlockListener.class\r\nxyz\\kiradev\\managers\\DivisionsManager.class\r\nxyz\\kiradev\\listeners\\PlayerDataListener.class\r\nxyz\\kiradev\\ui\\unranked\\UnrankedInventoryModern.class\r\nxyz\\kiradev\\utils\\assemble\\AssembleBoard.class\r\nxyz\\kiradev\\commands\\admin\\SetSpawnCMD.class\r\nxyz\\kiradev\\managers\\GameManager.class\r\nxyz\\kiradev\\utils\\assemble\\AssembleAdapter.class\r\nxyz\\kiradev\\managers\\GameManager$1.class\r\nxyz\\kiradev\\utils\\assemble\\Assemble.class\r\nxyz\\kiradev\\commands\\admin\\ArenaCMD.class\r\nxyz\\kiradev\\types\\Data.class\r\nxyz\\kiradev\\commands\\user\\QueueCMD.class\r\nxyz\\kiradev\\Placeholder.class\r\nxyz\\kiradev\\ui\\KitEditorInventory.class\r\nxyz\\kiradev\\managers\\ArenaManager.class\r\nxyz\\kiradev\\utils\\Cooldowns.class\r\nxyz\\kiradev\\utils\\render\\CC.class\r\nxyz\\kiradev\\managers\\ScoreboardManager$1.class\r\nxyz\\kiradev\\utils\\PlayerUtils.class\r\nxyz\\kiradev\\ui\\unranked\\UnrankedInventoryLegacy.class\r\nxyz\\kiradev\\commands\\user\\KitEditorCMD.class\r\nxyz\\kiradev\\utils\\render\\Console.class\r\nxyz\\kiradev\\ui\\StatsInventory.class\r\nxyz\\kiradev\\Stellar.class\r\nxyz\\kiradev\\utils\\assemble\\events\\AssembleBoardDestroyEvent.class\r\nxyz\\kiradev\\commands\\user\\StatsCMD.class\r\nxyz\\kiradev\\types\\Division.class\r\nxyz\\kiradev\\listeners\\PlayerJoin.class\r\nxyz\\kiradev\\player\\GameState.class\r\nxyz\\kiradev\\commands\\user\\LeaveQueueCMD.class\r\nxyz\\kiradev\\managers\\InventoryManager.class\r\nxyz\\kiradev\\utils\\LocationUtil.class\r\nxyz\\kiradev\\utils\\assemble\\AssembleStyle.class\r\nxyz\\kiradev\\managers\\ScoreboardManager.class\r\nxyz\\kiradev\\listeners\\GameListener.class\r\nxyz\\kiradev\\ui\\SettingsKillEffectsInventory.class\r\nxyz\\kiradev\\commands\\user\\PingCMD.class\r\nxyz\\kiradev\\types\\Arena.class\r\nxyz\\kiradev\\commands\\user\\SettingsCMD.class\r\nxyz\\kiradev\\listeners\\StatsListener.class\r\nxyz\\kiradev\\utils\\DiscordUtils.class\r\nxyz\\kiradev\\managers\\ConfigManager.class\r\nxyz\\kiradev\\listeners\\MenuListener.class\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst b/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst
--- a/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst	(date 1698852801679)
@@ -1,4 +1,5 @@
 xyz\kiradev\commands\user\UnrankedCMD.class
+xyz\kiradev\utils\assemble\AssembleUtils.class
 xyz\kiradev\player\PlayerState.class
 xyz\kiradev\utils\assemble\events\AssembleBoardCreateEvent.class
 xyz\kiradev\commands\admin\KitsCMD.class
@@ -60,6 +61,7 @@
 xyz\kiradev\types\Arena.class
 xyz\kiradev\commands\user\SettingsCMD.class
 xyz\kiradev\listeners\StatsListener.class
+xyz\kiradev\utils\assemble\AssembleException.class
 xyz\kiradev\utils\DiscordUtils.class
 xyz\kiradev\managers\ConfigManager.class
 xyz\kiradev\listeners\MenuListener.class
Index: target/classes/features/messages.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>general:\r\n  join-message:\r\n    - \"&7&m--------------------------------\"\r\n    - \"&fWelcome &e{player}&f to &bServer&f Network!\"\r\n    -  ' '\r\n    - \"Discord: &ediscord.gg/server\"\r\n    - \"Twitter: &etwitter.com/server\"\r\n    - \"Teamspeak: &eteamspeak.com/server\"\r\n    -  ' '\r\n    - \"Like us on &bNameMC&f for a free rank!\"\r\n    - \"https://namemc.com/server/servername\"\r\n    -  ' '\r\n    - '&7&m--------------------------------'\r\n  ping-message: \"&eYour ping is &f{ping}\"\r\n  other-player-ping-message: \"&e{player}'s ping is &f{ping}\"\r\n  kit-saved: \"&aYour kit has saved successfully .\"\r\nmatch:\r\n  match-found:\r\n    - ' '\r\n    - '&bMatch Found'\r\n    - '&f- &bOpponent: &f{opponent} &7({opponent-ping}ms)'\r\n    - '&f- &bArena: &f{arena}'\r\n    - '&f- &bKit: &f{kit}'\r\n    - '&f- &bTitle: &f{division}'\r\n    - ' '\r\n  kill-message:\r\n    - '&7&m------------------------------'\r\n    - '&a&lWinner: &f{winner} &a({winner-elo})'\r\n    - '&c&lLoser: &f{loser} &c({loser-elo})'\r\n    - '&7&m------------------------------'\r\n  cooldown-message: \"&cYou need to wait {cooldown} seconds!\"\r\n  starting-countdown: \"&bGame starting in &f{countdown}...\"\r\n  match-started: \"&bGame started!\"\r\nqueue:\r\n  already-in-queue-message: \"&cYou are already in queue!\"\r\n  added-to-queue:\r\n    - ''\r\n    - '&b{gamemode} Queue'\r\n    - ' &fSearching for a match..'\r\n    - ''\r\n  leave-queue: \"&cYou're no longer in {kit} queue.\"\r\n  not-in-queue: \"&cYou are not in queue!\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/features/messages.yml b/target/classes/features/messages.yml
--- a/target/classes/features/messages.yml	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/target/classes/features/messages.yml	(date 1698852798976)
@@ -2,14 +2,14 @@
   join-message:
     - "&7&m--------------------------------"
     - "&fWelcome &e{player}&f to &bServer&f Network!"
-    -  ' '
+    - ' '
     - "Discord: &ediscord.gg/server"
     - "Twitter: &etwitter.com/server"
     - "Teamspeak: &eteamspeak.com/server"
-    -  ' '
+    - ' '
     - "Like us on &bNameMC&f for a free rank!"
     - "https://namemc.com/server/servername"
-    -  ' '
+    - ' '
     - '&7&m--------------------------------'
   ping-message: "&eYour ping is &f{ping}"
   other-player-ping-message: "&e{player}'s ping is &f{ping}"
Index: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>C:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\events\\AssembleBoardCreatedEvent.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\Constants.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\AssembleListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\PlayerUtils.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\InventoryManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\types\\Data.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\render\\ItemBuilder.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\ui\\unranked\\UnrankedInventoryModern.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\LeaveQueueCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\ui\\SettingsInventory.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\Placeholder.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\DivisionsManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\events\\AssembleBoardCreateEvent.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\Assemble.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\AssembleThread.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\GameListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\ScoreboardManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\Stellar.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\StatsListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\MatchManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\AssembleBoard.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\LocationUtil.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\ui\\SettingsKillEffectsInventory.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\PlayerJoin.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\player\\GameState.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\admin\\SetSpawnCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\AssembleBoardEntry.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\ArenaManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\ui\\StatsInventory.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\StatsCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\QueueManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\render\\CC.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\SpawnListeners.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\types\\Arena.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\KitManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\WorldListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\Cooldowns.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\RankedCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\player\\PlayerState.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\ui\\unranked\\UnrankedInventoryLegacy.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\AssembleStyle.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\ConfigManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\KitEditorCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\managers\\GameManager.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\types\\Division.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\types\\Match.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\ui\\KitEditorInventory.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\PingCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\PlayerDataListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\AssembleAdapter.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\SettingsCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\admin\\MainCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\admin\\KitsCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\admin\\ArenaCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\DiscordUtils.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\UnrankedCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\assemble\\events\\AssembleBoardDestroyEvent.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\KitEditorListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\types\\Kit.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\commands\\user\\QueueCMD.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\utils\\render\\Console.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\BlockListener.java\r\nC:\\Stellar\\src\\main\\java\\xyz\\kiradev\\listeners\\MenuListener.java\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst b/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
--- a/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(date 1698852801680)
@@ -9,6 +9,7 @@
 C:\Stellar\src\main\java\xyz\kiradev\commands\user\LeaveQueueCMD.java
 C:\Stellar\src\main\java\xyz\kiradev\ui\SettingsInventory.java
 C:\Stellar\src\main\java\xyz\kiradev\Placeholder.java
+C:\Stellar\src\main\java\xyz\kiradev\utils\assemble\AssembleException.java
 C:\Stellar\src\main\java\xyz\kiradev\managers\DivisionsManager.java
 C:\Stellar\src\main\java\xyz\kiradev\utils\assemble\events\AssembleBoardCreateEvent.java
 C:\Stellar\src\main\java\xyz\kiradev\utils\assemble\Assemble.java
@@ -19,6 +20,7 @@
 C:\Stellar\src\main\java\xyz\kiradev\listeners\StatsListener.java
 C:\Stellar\src\main\java\xyz\kiradev\managers\MatchManager.java
 C:\Stellar\src\main\java\xyz\kiradev\utils\assemble\AssembleBoard.java
+C:\Stellar\src\main\java\xyz\kiradev\utils\assemble\AssembleUtils.java
 C:\Stellar\src\main\java\xyz\kiradev\utils\LocationUtil.java
 C:\Stellar\src\main\java\xyz\kiradev\ui\SettingsKillEffectsInventory.java
 C:\Stellar\src\main\java\xyz\kiradev\listeners\PlayerJoin.java
Index: target/classes/ui/menus.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Stellar Practice v1.2 | Kira Development\r\n# Legacy = No Glass In menu | Modern = Glass In menu\r\n\r\nqueue-gui-type:\r\n  unranked:\r\n    type: \"modern\" # Menu type: Legacy - Modern\r\n    item-color: \"&b\"\r\n    height: 3\r\n    menu-name: \"&8Unranked Queue\"\r\n    surrounding-items: STAINED_GLASS_PANE\r\n    surrounding-items-name: \" \"\r\n    durability: 7\r\n  ranked:\r\n    type: \"modern\" # Menu type: Legacy - Modern\r\n    item-color: \"&9\"\r\n    height: 3\r\n    menu-name: \"&8Ranked Queue\"\r\n    surrounding-items: STAINED_GLASS_PANE\r\n    surrounding-items-name: \"&bEmpty\"\r\n    durability: 11\r\n  item-meta:\r\n    - \"&7{description}\"\r\n    - \" \"\r\n    - \"&fPlaying: &b{playing}\"\r\n    - \"&fQueuing: &b{queueing}\"\r\n    - \" \"\r\n    - \"&aClick to play.\"\r\nstats:\r\n  menu-name: \"&bStatistics\"\r\n  item-name: \"&bYour Stats\"\r\n  item-meta:\r\n    - \"&7&m-----------------------\"\r\n    - \"&b* Matches Played&7: &f{matches_played}\"\r\n    - \"&b* Wins&7: &f{matches-won}\"\r\n    - \"&b* Lost&7: &f{matches-lost}\"\r\n    - \"&b* ELO&7: &f{elo}\"\r\n    - \"&b* KDR&7: &f{kdr}\"\r\n    - \"&b* TITLE&7: &f{division}\"\r\n    - \"&7&m-----------------------\"\r\nsettings:\r\n  item-color: \"&b\"\r\nkit-editor:\r\n  menu-name: \"&8Kit editor\"\r\n  item-color: \"&b\"\r\n  height: 3\r\n  surrounding-items: STAINED_GLASS_PANE\r\n  surrounding-items-name: \" \"\r\n  durability: 7
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/ui/menus.yml b/target/classes/ui/menus.yml
--- a/target/classes/ui/menus.yml	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/target/classes/ui/menus.yml	(date 1698852798979)
@@ -1,4 +1,4 @@
-# Stellar Practice v1.2 | Kira Development
+t# Stellar Practice v1.2 | Kira Development
 # Legacy = No Glass In menu | Modern = Glass In menu
 
 queue-gui-type:
Index: src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package xyz.kiradev.utils.assemble.events;\r\n\r\nimport lombok.Getter;\r\nimport org.bukkit.entity.Player;\r\nimport org.bukkit.event.Cancellable;\r\nimport org.bukkit.event.Event;\r\nimport org.bukkit.event.HandlerList;\r\n\r\n@Getter\r\npublic class AssembleBoardDestroyEvent extends Event implements Cancellable {\r\n\r\n    @Getter public static HandlerList handlerList = new HandlerList();\r\n\r\n    private Player player;\r\n    private boolean cancelled = false;\r\n\r\n    public AssembleBoardDestroyEvent(Player player) {\r\n        this.player = player;\r\n    }\r\n\r\n    @Override\r\n    public void setCancelled(boolean b) {\r\n        this.cancelled = b;\r\n    }\r\n\r\n    @Override\r\n    public HandlerList getHandlers() {\r\n        return handlerList;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java b/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java
--- a/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java	(revision b5247d435c1755f944edf108cc93b06008b64750)
+++ b/src/main/java/xyz/kiradev/utils/assemble/events/AssembleBoardDestroyEvent.java	(date 1698844824325)
@@ -1,28 +1,31 @@
 package xyz.kiradev.utils.assemble.events;
 
 import lombok.Getter;
+import lombok.Setter;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 
 @Getter
+@Setter
 public class AssembleBoardDestroyEvent extends Event implements Cancellable {
 
-    @Getter public static HandlerList handlerList = new HandlerList();
+    @Getter
+    public static HandlerList handlerList = new HandlerList();
 
     private Player player;
     private boolean cancelled = false;
 
+    /**
+     * Assemble Board Destroy Event.
+     *
+     * @param player who's board got destroyed.
+     */
     public AssembleBoardDestroyEvent(Player player) {
         this.player = player;
     }
 
-    @Override
-    public void setCancelled(boolean b) {
-        this.cancelled = b;
-    }
-
     @Override
     public HandlerList getHandlers() {
         return handlerList;
